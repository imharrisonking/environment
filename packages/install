#!/bin/bash
export HOST=$(hostname)

# Detect OS and set package manager
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "Installing packages for macOS..."
    PACKAGE_SUFFIX="-mac"
    
    # Check if Homebrew is installed
    if ! command -v brew &> /dev/null; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    
    INSTALLER="brew install"
else
    echo "Installing packages for Linux..."
    PACKAGE_SUFFIX="-linux"
    
    # Update package list
    sudo apt update
    INSTALLER="sudo apt install -y"
fi

# Install base packages
BASE_FILE="./group/base$PACKAGE_SUFFIX"
if [ -f "$BASE_FILE" ]; then
    echo "Installing base packages from $BASE_FILE"
    if [ -s "$BASE_FILE" ]; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # For macOS, install packages one by one to handle comments
            cat "$BASE_FILE" | grep -v '^#' | grep -v '^$' | while read package; do
                if [ ! -z "$package" ]; then
                    $INSTALLER "$package"
                fi
            done
        else
            # For Linux, install all at once
            $INSTALLER $(cat "$BASE_FILE" | grep -v '^#' | grep -v '^$' | tr '\n' ' ')
        fi
    fi
fi

# Install macOS GUI applications if on macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    MAC_FILE="./group/mac"
    if [ -f "$MAC_FILE" ]; then
        echo "Installing macOS applications from $MAC_FILE"
        if [ -s "$MAC_FILE" ]; then
            # Handle Homebrew cask installations
            cat "$MAC_FILE" | grep -v '^#' | grep -v '^$' | while read package; do
                if [ ! -z "$package" ]; then
                    if [[ "$package" == --cask* ]]; then
                        brew install "$package"
                    else
                        brew install "$package"
                    fi
                fi
            done
        fi
    fi
fi

# Install host-specific packages (copernicus, etc.)
echo "Checking for host-specific packages for: $HOST"
for file in ./group/$HOST/*; do
    if [ -f "$file" ]; then
        echo "Installing host-specific packages from $file"
        if [ -s "$file" ]; then
            if [[ "$OSTYPE" == "darwin"* ]]; then
                cat "$file" | grep -v '^#' | grep -v '^$' | while read package; do
                    if [ ! -z "$package" ]; then
                        $INSTALLER "$package"
                    fi
                done
            else
                $INSTALLER $(cat "$file" | grep -v '^#' | grep -v '^$' | tr '\n' ' ')
            fi
        fi
    fi
done

# Install packages that need special handling
echo "Installing additional tools that require special installation..."


# Install zoxide
if ! command -v zoxide &> /dev/null; then
    echo "Installing zoxide..."
    curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
fi

# Docker (requires adding Docker's official repository)
if ! command -v docker &> /dev/null; then
    echo "Installing Docker..."
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
fi

# GitHub CLI
if ! command -v gh &> /dev/null; then
    echo "Installing GitHub CLI..."
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    sudo apt update
    sudo apt install -y gh
fi

# Install via npm (global packages)
if command -v npm &> /dev/null; then
    echo "Installing npm packages..."
    sudo npm install -g typescript pnpm
fi

# Install Rust and Cargo packages
if ! command -v rustc &> /dev/null; then
    echo "Installing Rust..."
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    source ~/.cargo/env
fi

echo "Installation complete! Some tools may require a shell restart."
